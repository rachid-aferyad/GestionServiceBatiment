@model GestionServiceBatiment.ASP.Models.Comments.CreateCommentForm

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@*@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>CreateCommentForm</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Star, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Star, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Star, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatorId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatorId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatorId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServiceId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RequestId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RequestId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RequestId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@model IQueryable<CommentsSystemMVC5.ViewModels.PostsVM>

@{
    ViewBag.Title = "GetPosts";
}

@if (Model != null)
{
    foreach (var post in Model)
    {
        <div class="panel panel-default" style="width: 80%;">
            <div class="panel-body">
                <div class="avatar">
                    <img src="~/Images/avatar.png" class="img-circle" style="width: 60px;" />
                    <span> <a href="" style="font-weight:bold">Leo Messi</a> </span><br />
                    <p style="margin-left: 60px; margin-top: -19px;">
                        <span class="glyphicon glyphicon-time" aria-hidden="true"></span>
                        <time class="timeago" datetime="@post.PostedDate">@post.PostedDate</time>
                    </p>

                </div>

                <div class="postMessage" style="margin-top: 11px; margin-left: 9px;">
                    <span class="label label-warning"> @string.Format("Post #{0}", post.PostID) </span><br />
                    <p class="message">
                        @post.Message
                    </p>
                </div>

            </div>
            <div class="panel-footer">
                <button type="button" class="btn btn-default Comment" data-id="@post.PostID" value="Comment">
                    <span class="glyphicon glyphicon-comment" aria-hidden="true"></span> Comment
                </button>

            </div>
            <div id="@string.Format("{0}_{1}","commentsBlock", post.PostID)" style="border: 1px solid #f1eaea; background-color: #eaf2ff;">

                <div class="AddComment" style="margin-left: 30%;  margin-bottom: 5px; margin-top: 8px;">
                    <input type="text" id="@string.Format("{0}_{1}", "comment", post.PostID)" class="form-control" placeholder="Add a Comment ..." style="display: inline;" />
                    <button type="button" class="btn btn-default addComment" data-id="@post.PostID"><span class="glyphicon glyphicon-comment" aria-hidden="true"></span></button>
                </div>

            </div>



        </div>
    }
}

@section Scripts
{

    <script type="text/javascript">


        $(document).ready(function () {


            //Click Comment
            $('.Comment').on('click', function () {

                var id = $(this).attr("data-id");
                var allCommentsArea = $('<div>').addClass('allComments_' + id);

                //function that allow us to get all comments related to post id
                $.ajax({

                    type: 'GET',
                    url: '@Url.Action("GetComments", "Comments")',
                    data: { postId: id },
                    success: function (response) {

                        if ($('div').hasClass('allComments_' + id + ''))
                        {
                            $('div[class=allComments_' + id + ']').remove();
                        }
                        //console.log(response);


                        allCommentsArea.html(response);
                        allCommentsArea.prependTo('#commentsBlock_' + id);


                    },
                    error: function (response) {
                        alert('Sorry: Comments cannot be loaded !');
                    }


                })

            });

            //Add New Comment
            $('.addComment').on('click', function () {

                var postId = $(this).attr('data-id');
                var commentMsg = $('#comment_' + postId).val();
                var dateTimeNow = new Date();

                //alert('Hello');
                var comment = {
                    CommentMsg: commentMsg,
                    CommentedDate: dateTimeNow.toLocaleString()
                };

                $.ajax({

                    type: 'POST',
                    url: '@Url.Action("AddComment", "Comments")',
                    data: { comment, postId },
                    success: function (response) {

                        $('div[class=allComments_' + postId + ']').remove();

                        var allCommentsArea = $('<div>').addClass('allComments_' + postId);
                        allCommentsArea.html(response);

                        allCommentsArea.prependTo('#commentsBlock_' + postId);

                    },
                    error: function (response) {
                        alert('Sorry: Something Wrong');
                    }

                });

            });

            jQuery("time.timeago").timeago();

        });

    </script>


}*@ 